#!/usr/bin/env bash
set -xeuo pipefail

LOG_DIR="/Library/Logs/io.goauthentik"
DAEMON_PLIST_PATH="/Library/LaunchDaemons/io.goauthentik.platform.sysd.plist"
DAEMON_DIR="/opt/authentik"

mkdir -p "$LOG_DIR"
chmod 755 "$LOG_DIR"
exec 2>&1 > "$LOG_DIR"/pkg_postinstall.log

INSTALL_DIR=$2
echo "$(date) Running postinstall. install_dir=${INSTALL_DIR}"

## Daemon install

mkdir -p "$DAEMON_DIR/config"
mkdir -p "$DAEMON_DIR/runtime"
chmod -R 700 "$DAEMON_DIR"

cp -n ./sysd-config.json "$DAEMON_DIR/config/config.json" || true

sudo launchctl unload -w $DAEMON_PLIST_PATH

sleep 1
cp -f "./daemon.plist" $DAEMON_PLIST_PATH
/usr/libexec/PlistBuddy -c "Set :ProgramArguments:0 ${INSTALL_DIR}/authentik\ Agent.app/Contents/MacOS/ak-sysd" $DAEMON_PLIST_PATH

sudo launchctl load -w $DAEMON_PLIST_PATH

echo "Finished loading authentik sysd daemon."

set +e
old_pid=$(pgrep "ak-agent")

if [ $? -eq 0 ] && [ $old_pid -gt 0 ]; then
    echo "'ak-agent' app running with pid: ${old_pid}.";
    sudo pkill "ak-agent" && echo "Killed existing 'ak-agent' app." || echo "Unable to kill 'ak-agent' app."
else
    echo "'ak-agent' app not running."
fi

sleep 1

LAUNCH_FAILED=true
for i in {1..5}; do
    echo "Attempt $i: Opening authentik Agent app"

    open "${INSTALL_DIR}/authentik Agent.app"
    sleep 1

    new_pid=$(pgrep "ak-agent")
    if [ $? -eq 0 ] && [ $new_pid -gt 0 ]; then
        echo "'authentik Agent' app running with new pid: ${new_pid}."
        LAUNCH_FAILED=false
        break
    fi
done

if [ $LAUNCH_FAILED = true ]; then
    echo "Failed to launch 'authentik Agent' app"
fi

echo "Linking CLI applications"
mkdir -p /usr/local/bin
ln -sf "$INSTALL_DIR/authentik Agent.app/Contents/MacOS/ak" /usr/local/bin/ak
ln -sf "$INSTALL_DIR/authentik Agent.app/Contents/MacOS/ak-vault" /usr/local/bin/ak-vault

echo "Installing browser native messaging host"

chromeSystemWidePath="/Library/Google/Chrome/NativeMessagingHosts"
edgeSystemWidePath="/Library/Microsoft/Edge/NativeMessagingHosts"

# Ensure the system-wide directory exists, otherwise create it
if [ ! -d "$chromeSystemWidePath" ]; then
  echo "$chromeSystemWidePath doesn't exist, creating directory"
  mkdir -p "$chromeSystemWidePath"
fi

if [ ! -d "$edgeSystemWidePath" ]; then
  echo "$edgeSystemWidePath doesn't exist, creating directory"
  mkdir -p "$edgeSystemWidePath"
fi

# Copy the manifest file to the system-wide directory
cp -v "/Applications/authentik Agent.app/Contents/Resources/browser-host.json" "$chromeSystemWidePath/io.goauthentik.platform.json"
cp -v "/Applications/authentik Agent.app/Contents/Resources/browser-host.json" "$edgeSystemWidePath/io.goauthentik.platform.json"

echo "Finished running postinstall script."
