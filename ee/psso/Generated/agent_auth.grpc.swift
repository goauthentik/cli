// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: agent_auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

internal import GRPCCore
internal import GRPCProtobuf

// MARK: - agent_auth.AgentAuth

/// Namespace containing generated types for the "agent_auth.AgentAuth" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum AgentAuth {
    /// Service descriptor for the "agent_auth.AgentAuth" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_auth.AgentAuth")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "WhoAmI" metadata.
        internal enum WhoAmI {
            /// Request type for "WhoAmI".
            internal typealias Input = WhoAmIRequest
            /// Response type for "WhoAmI".
            internal typealias Output = WhoAmIResponse
            /// Descriptor for "WhoAmI".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_auth.AgentAuth"),
                method: "WhoAmI"
            )
        }
        /// Namespace for "GetCurrentToken" metadata.
        internal enum GetCurrentToken {
            /// Request type for "GetCurrentToken".
            internal typealias Input = CurrentTokenRequest
            /// Response type for "GetCurrentToken".
            internal typealias Output = CurrentTokenResponse
            /// Descriptor for "GetCurrentToken".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_auth.AgentAuth"),
                method: "GetCurrentToken"
            )
        }
        /// Namespace for "CachedTokenExchange" metadata.
        internal enum CachedTokenExchange {
            /// Request type for "CachedTokenExchange".
            internal typealias Input = TokenExchangeRequest
            /// Response type for "CachedTokenExchange".
            internal typealias Output = TokenExchangeResponse
            /// Descriptor for "CachedTokenExchange".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_auth.AgentAuth"),
                method: "CachedTokenExchange"
            )
        }
        /// Namespace for "Authorize" metadata.
        internal enum Authorize {
            /// Request type for "Authorize".
            internal typealias Input = AuthorizeRequest
            /// Response type for "Authorize".
            internal typealias Output = AuthorizeResponse
            /// Descriptor for "Authorize".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_auth.AgentAuth"),
                method: "Authorize"
            )
        }
        /// Descriptors for all methods in the "agent_auth.AgentAuth" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            WhoAmI.descriptor,
            GetCurrentToken.descriptor,
            CachedTokenExchange.descriptor,
            Authorize.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "agent_auth.AgentAuth" service.
    internal static let AgentAuth = GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_auth.AgentAuth")
}

// MARK: agent_auth.AgentAuth (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AgentAuth {
    /// Generated client protocol for the "agent_auth.AgentAuth" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "WhoAmI" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `WhoAmIRequest` message.
        ///   - serializer: A serializer for `WhoAmIRequest` messages.
        ///   - deserializer: A deserializer for `WhoAmIResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func whoAmI<Result>(
            request: GRPCCore.ClientRequest<WhoAmIRequest>,
            serializer: some GRPCCore.MessageSerializer<WhoAmIRequest>,
            deserializer: some GRPCCore.MessageDeserializer<WhoAmIResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<WhoAmIResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCurrentToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CurrentTokenRequest` message.
        ///   - serializer: A serializer for `CurrentTokenRequest` messages.
        ///   - deserializer: A deserializer for `CurrentTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCurrentToken<Result>(
            request: GRPCCore.ClientRequest<CurrentTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<CurrentTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CurrentTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CurrentTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CachedTokenExchange" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TokenExchangeRequest` message.
        ///   - serializer: A serializer for `TokenExchangeRequest` messages.
        ///   - deserializer: A deserializer for `TokenExchangeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cachedTokenExchange<Result>(
            request: GRPCCore.ClientRequest<TokenExchangeRequest>,
            serializer: some GRPCCore.MessageSerializer<TokenExchangeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<TokenExchangeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<TokenExchangeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Authorize" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AuthorizeRequest` message.
        ///   - serializer: A serializer for `AuthorizeRequest` messages.
        ///   - deserializer: A deserializer for `AuthorizeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func authorize<Result>(
            request: GRPCCore.ClientRequest<AuthorizeRequest>,
            serializer: some GRPCCore.MessageSerializer<AuthorizeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<AuthorizeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AuthorizeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "agent_auth.AgentAuth" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "WhoAmI" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `WhoAmIRequest` message.
        ///   - serializer: A serializer for `WhoAmIRequest` messages.
        ///   - deserializer: A deserializer for `WhoAmIResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func whoAmI<Result>(
            request: GRPCCore.ClientRequest<WhoAmIRequest>,
            serializer: some GRPCCore.MessageSerializer<WhoAmIRequest>,
            deserializer: some GRPCCore.MessageDeserializer<WhoAmIResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<WhoAmIResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: AgentAuth.Method.WhoAmI.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCurrentToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CurrentTokenRequest` message.
        ///   - serializer: A serializer for `CurrentTokenRequest` messages.
        ///   - deserializer: A deserializer for `CurrentTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCurrentToken<Result>(
            request: GRPCCore.ClientRequest<CurrentTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<CurrentTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CurrentTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CurrentTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: AgentAuth.Method.GetCurrentToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CachedTokenExchange" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TokenExchangeRequest` message.
        ///   - serializer: A serializer for `TokenExchangeRequest` messages.
        ///   - deserializer: A deserializer for `TokenExchangeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func cachedTokenExchange<Result>(
            request: GRPCCore.ClientRequest<TokenExchangeRequest>,
            serializer: some GRPCCore.MessageSerializer<TokenExchangeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<TokenExchangeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<TokenExchangeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: AgentAuth.Method.CachedTokenExchange.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Authorize" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AuthorizeRequest` message.
        ///   - serializer: A serializer for `AuthorizeRequest` messages.
        ///   - deserializer: A deserializer for `AuthorizeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func authorize<Result>(
            request: GRPCCore.ClientRequest<AuthorizeRequest>,
            serializer: some GRPCCore.MessageSerializer<AuthorizeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<AuthorizeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AuthorizeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: AgentAuth.Method.Authorize.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AgentAuth.ClientProtocol {
    /// Call the "WhoAmI" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `WhoAmIRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func whoAmI<Result>(
        request: GRPCCore.ClientRequest<WhoAmIRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<WhoAmIResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.whoAmI(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<WhoAmIRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<WhoAmIResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCurrentToken" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `CurrentTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCurrentToken<Result>(
        request: GRPCCore.ClientRequest<CurrentTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CurrentTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCurrentToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<CurrentTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<CurrentTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CachedTokenExchange" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `TokenExchangeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cachedTokenExchange<Result>(
        request: GRPCCore.ClientRequest<TokenExchangeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<TokenExchangeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cachedTokenExchange(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<TokenExchangeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<TokenExchangeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Authorize" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `AuthorizeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authorize<Result>(
        request: GRPCCore.ClientRequest<AuthorizeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AuthorizeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.authorize(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<AuthorizeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<AuthorizeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AgentAuth.ClientProtocol {
    /// Call the "WhoAmI" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func whoAmI<Result>(
        _ message: WhoAmIRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<WhoAmIResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<WhoAmIRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.whoAmI(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCurrentToken" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCurrentToken<Result>(
        _ message: CurrentTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CurrentTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<CurrentTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getCurrentToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CachedTokenExchange" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cachedTokenExchange<Result>(
        _ message: TokenExchangeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<TokenExchangeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<TokenExchangeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cachedTokenExchange(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Authorize" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authorize<Result>(
        _ message: AuthorizeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AuthorizeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<AuthorizeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.authorize(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}
