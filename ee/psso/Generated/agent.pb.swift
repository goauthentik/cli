// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: agent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

internal import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RequestHeader: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profile: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ResponseHeader: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var successful: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Token: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var preferredUsername: String = String()

  var iss: String = String()

  var sub: String = String()

  var aud: [String] = []

  var exp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _exp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_exp = newValue}
  }
  /// Returns true if `exp` has been explicitly set.
  var hasExp: Bool {return self._exp != nil}
  /// Clears the value of `exp`. Subsequent reads from it will return its default value.
  mutating func clearExp() {self._exp = nil}

  var nbf: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _nbf ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_nbf = newValue}
  }
  /// Returns true if `nbf` has been explicitly set.
  var hasNbf: Bool {return self._nbf != nil}
  /// Clears the value of `nbf`. Subsequent reads from it will return its default value.
  mutating func clearNbf() {self._nbf = nil}

  var iat: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _iat ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_iat = newValue}
  }
  /// Returns true if `iat` has been explicitly set.
  var hasIat: Bool {return self._iat != nil}
  /// Clears the value of `iat`. Subsequent reads from it will return its default value.
  mutating func clearIat() {self._iat = nil}

  var jti: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _exp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _nbf: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _iat: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "agent"

extension RequestHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestHeader"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}profile\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profile.isEmpty {
      try visitor.visitSingularStringField(value: self.profile, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RequestHeader, rhs: RequestHeader) -> Bool {
    if lhs.profile != rhs.profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResponseHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseHeader"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}successful\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.successful) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.successful != false {
      try visitor.visitSingularBoolField(value: self.successful, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ResponseHeader, rhs: ResponseHeader) -> Bool {
    if lhs.successful != rhs.successful {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Token"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}preferred_username\0\u{1}iss\0\u{1}sub\0\u{1}aud\0\u{1}exp\0\u{1}nbf\0\u{1}iat\0\u{1}jti\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.preferredUsername) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.iss) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sub) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.aud) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._exp) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._nbf) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._iat) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.jti) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.preferredUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.preferredUsername, fieldNumber: 1)
    }
    if !self.iss.isEmpty {
      try visitor.visitSingularStringField(value: self.iss, fieldNumber: 2)
    }
    if !self.sub.isEmpty {
      try visitor.visitSingularStringField(value: self.sub, fieldNumber: 3)
    }
    if !self.aud.isEmpty {
      try visitor.visitRepeatedStringField(value: self.aud, fieldNumber: 4)
    }
    try { if let v = self._exp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._nbf {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._iat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.jti.isEmpty {
      try visitor.visitSingularStringField(value: self.jti, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Token, rhs: Token) -> Bool {
    if lhs.preferredUsername != rhs.preferredUsername {return false}
    if lhs.iss != rhs.iss {return false}
    if lhs.sub != rhs.sub {return false}
    if lhs.aud != rhs.aud {return false}
    if lhs._exp != rhs._exp {return false}
    if lhs._nbf != rhs._nbf {return false}
    if lhs._iat != rhs._iat {return false}
    if lhs.jti != rhs.jti {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
