// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: agent_cache.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

internal import GRPCCore
internal import GRPCProtobuf

// MARK: - agent_cache.AgentCache

/// Namespace containing generated types for the "agent_cache.AgentCache" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum AgentCache {
    /// Service descriptor for the "agent_cache.AgentCache" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_cache.AgentCache")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "CacheGet" metadata.
        internal enum CacheGet {
            /// Request type for "CacheGet".
            internal typealias Input = CacheGetRequest
            /// Response type for "CacheGet".
            internal typealias Output = CacheGetResponse
            /// Descriptor for "CacheGet".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_cache.AgentCache"),
                method: "CacheGet"
            )
        }
        /// Namespace for "CacheSet" metadata.
        internal enum CacheSet {
            /// Request type for "CacheSet".
            internal typealias Input = CacheSetRequest
            /// Response type for "CacheSet".
            internal typealias Output = CacheSetResponse
            /// Descriptor for "CacheSet".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_cache.AgentCache"),
                method: "CacheSet"
            )
        }
        /// Descriptors for all methods in the "agent_cache.AgentCache" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            CacheGet.descriptor,
            CacheSet.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "agent_cache.AgentCache" service.
    internal static let AgentCache = GRPCCore.ServiceDescriptor(fullyQualifiedService: "agent_cache.AgentCache")
}

// MARK: agent_cache.AgentCache (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AgentCache {
    /// Generated client protocol for the "agent_cache.AgentCache" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "CacheGet" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CacheGetRequest` message.
        ///   - serializer: A serializer for `CacheGetRequest` messages.
        ///   - deserializer: A deserializer for `CacheGetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cacheGet<Result>(
            request: GRPCCore.ClientRequest<CacheGetRequest>,
            serializer: some GRPCCore.MessageSerializer<CacheGetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CacheGetResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheGetResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CacheSet" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CacheSetRequest` message.
        ///   - serializer: A serializer for `CacheSetRequest` messages.
        ///   - deserializer: A deserializer for `CacheSetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cacheSet<Result>(
            request: GRPCCore.ClientRequest<CacheSetRequest>,
            serializer: some GRPCCore.MessageSerializer<CacheSetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CacheSetResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheSetResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "agent_cache.AgentCache" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CacheGet" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CacheGetRequest` message.
        ///   - serializer: A serializer for `CacheGetRequest` messages.
        ///   - deserializer: A deserializer for `CacheGetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func cacheGet<Result>(
            request: GRPCCore.ClientRequest<CacheGetRequest>,
            serializer: some GRPCCore.MessageSerializer<CacheGetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CacheGetResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheGetResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: AgentCache.Method.CacheGet.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CacheSet" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CacheSetRequest` message.
        ///   - serializer: A serializer for `CacheSetRequest` messages.
        ///   - deserializer: A deserializer for `CacheSetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func cacheSet<Result>(
            request: GRPCCore.ClientRequest<CacheSetRequest>,
            serializer: some GRPCCore.MessageSerializer<CacheSetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CacheSetResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheSetResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: AgentCache.Method.CacheSet.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AgentCache.ClientProtocol {
    /// Call the "CacheGet" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `CacheGetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cacheGet<Result>(
        request: GRPCCore.ClientRequest<CacheGetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheGetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cacheGet(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<CacheGetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<CacheGetResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CacheSet" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `CacheSetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cacheSet<Result>(
        request: GRPCCore.ClientRequest<CacheSetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheSetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cacheSet(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<CacheSetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<CacheSetResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AgentCache.ClientProtocol {
    /// Call the "CacheGet" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cacheGet<Result>(
        _ message: CacheGetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheGetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<CacheGetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cacheGet(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CacheSet" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cacheSet<Result>(
        _ message: CacheSetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CacheSetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<CacheSetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cacheSet(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}