// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: pam.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PAM_TokenAuth_FullMethodName       = "/pam.PAM/TokenAuth"
	PAM_InteractiveAuth_FullMethodName = "/pam.PAM/InteractiveAuth"
)

// PAMClient is the client API for PAM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PAMClient interface {
	TokenAuth(ctx context.Context, in *TokenAuthRequest, opts ...grpc.CallOption) (*TokenAuthResponse, error)
	InteractiveAuth(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InteractiveResponse, InteractiveChallenge], error)
}

type pAMClient struct {
	cc grpc.ClientConnInterface
}

func NewPAMClient(cc grpc.ClientConnInterface) PAMClient {
	return &pAMClient{cc}
}

func (c *pAMClient) TokenAuth(ctx context.Context, in *TokenAuthRequest, opts ...grpc.CallOption) (*TokenAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenAuthResponse)
	err := c.cc.Invoke(ctx, PAM_TokenAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) InteractiveAuth(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InteractiveResponse, InteractiveChallenge], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PAM_ServiceDesc.Streams[0], PAM_InteractiveAuth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InteractiveResponse, InteractiveChallenge]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PAM_InteractiveAuthClient = grpc.BidiStreamingClient[InteractiveResponse, InteractiveChallenge]

// PAMServer is the server API for PAM service.
// All implementations must embed UnimplementedPAMServer
// for forward compatibility.
type PAMServer interface {
	TokenAuth(context.Context, *TokenAuthRequest) (*TokenAuthResponse, error)
	InteractiveAuth(grpc.BidiStreamingServer[InteractiveResponse, InteractiveChallenge]) error
	mustEmbedUnimplementedPAMServer()
}

// UnimplementedPAMServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPAMServer struct{}

func (UnimplementedPAMServer) TokenAuth(context.Context, *TokenAuthRequest) (*TokenAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenAuth not implemented")
}
func (UnimplementedPAMServer) InteractiveAuth(grpc.BidiStreamingServer[InteractiveResponse, InteractiveChallenge]) error {
	return status.Errorf(codes.Unimplemented, "method InteractiveAuth not implemented")
}
func (UnimplementedPAMServer) mustEmbedUnimplementedPAMServer() {}
func (UnimplementedPAMServer) testEmbeddedByValue()             {}

// UnsafePAMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PAMServer will
// result in compilation errors.
type UnsafePAMServer interface {
	mustEmbedUnimplementedPAMServer()
}

func RegisterPAMServer(s grpc.ServiceRegistrar, srv PAMServer) {
	// If the following call pancis, it indicates UnimplementedPAMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PAM_ServiceDesc, srv)
}

func _PAM_TokenAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).TokenAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_TokenAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).TokenAuth(ctx, req.(*TokenAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_InteractiveAuth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PAMServer).InteractiveAuth(&grpc.GenericServerStream[InteractiveResponse, InteractiveChallenge]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PAM_InteractiveAuthServer = grpc.BidiStreamingServer[InteractiveResponse, InteractiveChallenge]

// PAM_ServiceDesc is the grpc.ServiceDesc for PAM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PAM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pam.PAM",
	HandlerType: (*PAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenAuth",
			Handler:    _PAM_TokenAuth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InteractiveAuth",
			Handler:       _PAM_InteractiveAuth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pam.proto",
}
